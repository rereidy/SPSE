#!/usr/bin/env python

from __future__ import print_function
import multiprocessing
import sys
import time
import timeit
from scapy.all import *

conf.iface = 'eth0'
conf.nofilter = 1

MAX_PROCESSES = 5

class Scanner(multiprocessing.Process):

    def run(self):
        name = multiprocessing.current_process().name
        print ("starting {0}".format(name), file=sys.stdout)
        ip = IP(src=src, dst=dest)
        TCP_SYN = TCP(sport=RandShort(), dport=int(port), flags='S', seq=40)
        TCP_SYNACK = sr1(ip/TCP_SYN, timeout=1)
        if not TCP_SYNACK or TCP_SYNACK.getlayer(TCP).flags != 0x12:
            print ("\n\tport {0}: not open".format(int(port)), file=sys.stdout)
        else:
            print ("\n\tport: {0}: open".format(int(port)), file=sys.stdout)

def usage():
    print ("\nTCP SYN Stealth Port Scanner", file=sys.stderr)
    print ("usage: ./5-2.py source_IP dest_IP")

def scan(src, dest, port):
    ip = IP(src=src, dst=dest)
    TCP_SYN = TCP(sport=RandShort(), dport=int(port), flags='S', seq=40)
    TCP_SYNACK = sr1(ip/TCP_SYN, timeout=1)
    if not TCP_SYNACK or TCP_SYNACK.getlayer(TCP).flags != 0x12:
        print ("\n\tport {0}: not open".format(int(port)), file=sys.stdout)
    else:
        print ("\n\tport: {0}: open".format(int(port)), file=sys.stdout)

def main(src, dest):
    for p in range(1024, 65535, 1):
        print ("\n{0} - scanning from {1} to {2} on {3} {4}".format('*' * 3, src, dest, p, '*' * 3), file=sys.stdout)
    scan(src, dest, port)

if __name__ == "__main__":
    if len(sys.argv) != 3:
        usage()
        sys.exit(1)
    else:
        main(sys.argv[1], sys.argv[2])