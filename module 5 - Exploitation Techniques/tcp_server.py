#!/usr/bin/env python

import socket
import signal
import sys
import getopt
import re

def alarm_handler(signum, tm):
    print "max time encountered ... shutting down"

def usage():
    print >> sys.stderr, """
%s - TCP server
usage: %s -t seconds -p port_num
    """ %(sys.argv[0], sys.argv[0])

def process_args(argv):
    seconds = 0
    port = -1
    try:
        opts, args = getopt.getopt(argv, 'ht:p:')

        for opt, arg in opts:
            if opt == '-h':
                usage()
                sys.exit(2)
            elif opt == '-t':
                if re.match("^[0-9]*$", arg):
                    seconds = int(arg)
                else:
                    raise TypeError("invalid type: time must be an integer")
            elif opt == '-p':
                if re.match("^[0-9]*$", arg):
                    port = int(arg)
                else:
                    raise TypeError("invalid type: port must be an integer")
    except TypeError, e:
        print >> sys.stderr, e
        usage()
        sys.exit(3)
    except getopt.GetoptError:
        print >> sys.stderr, "invalid argument"
        usage()
        sys.exit(1)

    return (seconds, port)


if __name__ == "__main__":
    (t, p) = process_args(sys.argv[1:])
    if t < 1:
        print >> sys.stderr, "you must provide a value > 0"
        sys.exit(1)
        
    if p < 1024:
        print >> sys.stderr, "you must bind to a port >= 1024"
        sys.exit(1)
    
    print "set up alarm handler"
    signal.signal(signal.SIGALRM, alarm_handler)
    signal.alarm(t)
    
    try:
        print "setting up socket"
        soc = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
        soc.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)

        soc.bind(('0.0.0.0',p))

        print "port established"
        
        soc.listen(2)
        (client,(ip,port)) = soc.accept()

    except socket.error, e:
        if soc:
            soc.close()
            
        print 'socket exception: ', e


    sys.exit(0)